;
; Nemo Andrea (nemoandrea@outlook.com)
; HSync generation for DLPC1438


; Program name
.program hsync

; The HSync and DATAEN_CMD signals are closely related. The back porch and front porch relate
; to when DATA_EN is active, but do not seem to be tied to the length of Hsync itself
; For example, in theory Hsync can be high while we are in the 'back porch' regime and DATAEN_CMD
; is high and we are already transmitting data. 

; looking at the scope signal of the Ultra there seems to be a 9 PLCK Sync pulse, with a 
; 9 PCLK front anc back porch for DATAEN_CMD

; frontporch: 9 PLCK (0.36us at 25MHz) 
; sync pulse: 9 PLCK  (0.36 us at 25MHz)  
; back porch: 9 PLCK (0.36 us at 25MHz) 
; active for: 1240 PLCK (49.6us at 25MHz)
;
; High for 9 cycles (360ns at 25MHz)
; Low  for 1258  cycles (50.32us at 25MHz)
; Total period of 1267 cycles (50.68us at 25MHz)


pull block              ; Pull from FIFO to OSR (only happens once)
.wrap_target            ; Program wraps to here

; ACTIVE + FRONTPORCH  duration:1280 PLCK  
mov x, osr              ; Copy value from OSR to x scratch register
activeporch:
   jmp x-- activeporch  ; Remain high in active mode and front porch

; FRONTPORCH  duration:9 PLCK
nop [6]    ; Sync Low for back porch (8 cycles) - 9th PLCK in next line
irq set 0      ; Set IRQ channel 0 to high to signal start of pulse(1 cycle)
nop

; SYNC PULSE  duration:9 PLCK
pulse:
    set pins, 1 [8]    ; Sync High for hsync pulse (9 cycles)

; BACKPORCH  duration:9 PLCK
backporch:
    set pins, 0 [8]    ; Sync Low for back porch (8 cycles) - 9th PLCK in next line
    
.wrap




% c-sdk {
static inline void hsync_program_init(PIO pio, uint sm, uint offset, uint pin) {

    // creates state machine configuration object c, sets
    // to default configurations. I believe this function is auto-generated
    // and gets a name of <program name>_program_get_default_config
    // Yes, page 40 of SDK guide
    pio_sm_config c = hsync_program_get_default_config(offset);

    // Map the state machine's SET pin group to one pin, namely the `pin`
    // parameter to this function.
    sm_config_set_set_pins(&c, pin, 1);

    // Set clock division (div by 5 for 25 MHz state machine)
    sm_config_set_clkdiv(&c, 5) ;

    // Set this pin's GPIO function (connect PIO to the pad)
    pio_gpio_init(pio, pin);
    // pio_gpio_init(pio, pin+1);
    
    // Set the pin direction to output at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
}
%}
