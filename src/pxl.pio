;
; Nemo Andrea (nemoandrea@outlook.com)
; Pixel Clock generation for DLPC1438

; Program name
.program pxl
.side_set 1 opt  
; we use side_set for the DATAEN_CMD

pull block 					; Pull from FIFO to OSR (only once)
mov y, osr 					; Copy value from OSR to y scratch register
.wrap_target

; set pins, 0 				; Zero grayscale pins in blanking //TODO do we need this??
mov x, y 					; Initialize counter variable

wait 1 irq 1  			; Wait for DATAEM_CMD interrupt
pxlout:
	pull block side 1		; Pull color value and set DATAEM_CMD high 
                            ; (we do it many times but there is no harm in that)
	out pins, 2	[3]			; Push out to pins (first pixel). First pixel is out 1 clock cycle after
                            ; DATAEM_CMD is high
	out pins, 2 [3]			; Push out to pins (next pixel)
    out pins, 2 [3]			; Push out to pins (next pixel)
    out pins, 2	[1]		; Push out to pins (next pixel)
	jmp x-- pxlout		; Stay here thru horizontal active mode

nop side 0  ; set DATAEM_CMD low again (TODO: see if this can be put one clock cycle sooner) 

.wrap


% c-sdk {
static inline void pxl_program_init(PIO pio, uint sm, uint offset, uint pin, uint validpin) {
    // creates state machine configuration object c, sets
    // to default configurations.
    pio_sm_config c = pxl_program_get_default_config(offset);

    // Map the state machine's SET and OUT pin group to three pins, the `pin`
    // parameter to this function is the lowest one. These groups overlap.
    sm_config_set_set_pins(&c, pin, 3);
    sm_config_set_out_pins(&c, pin, 3);

    //sideset pin (for DATAEM_CMD functionality)
    sm_config_set_sideset_pins(&c, validpin);   // pin for DATAEM_CMD. Independent from pixel pins

    // Set this pin's GPIO function (connect PIO to the pad)
    pio_gpio_init(pio, pin);
    pio_gpio_init(pio, pin+1);
    pio_gpio_init(pio, pin+2);
    pio_gpio_init(pio, validpin);  
    
    //assert(pin < validpin)  // we assume pin < validpin (otherwise you need to do some work in line below)
    //assert(validpin-pin > 7)  // excessive, but no harm in checking
    // Set the pin direction to output at the PIO (1 sideset + 8 pins for pixel) 
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 8, true);
    pio_sm_set_consecutive_pindirs(pio, sm, validpin, 1, true); 

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
}
%}