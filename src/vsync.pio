;
; Nemo Andrea (nemoandrea@outlook.com)
; VSync generation for DLPC1438

; Program name
.program vsync
.side_set 1 opt

; frontporch: 1  lines
; sync pulse: 2   lines
; back porch: 1  lines 
; active for: 720 lines
;
; Code size could be reduced with side setting



pull block                        ; Pull from FIFO to OSR (only once)
.wrap_target                      ; Program wraps to here

; ACTIVE duration:720 line (grayscale data can be put onto pins)
mov x, osr                        ; Copy value from OSR to x scratch register
activefront:
    wait 1 irq 0                  ; Wait for pre-DATAEN_CMD to go high
    irq set 1                     ; Set IRQ channel 1 high to signal DATAEM_CMD is high
    jmp x-- activefront           ; Remain in active mode, decrementing counter

; FRONTPORCH  duration:1 line 
wait 1 irq 0     
wait 1 irq 0

; SYNC PULSE  duration:2 line 
wait 1 irq 0 side 1               ; Wait for one line
wait 1 irq 0                      ; Wait for a second line

; BACKPORCH   duration:1 line 
wait 1 irq 0  side 0            ; side 0 will set sideset pin 1 low; which here is same as 'pins'
wait 1 irq 0  
.wrap                             ; Program wraps from here



% c-sdk {
static inline void vsync_program_init(PIO pio, uint sm, uint offset, uint pin) {

    // creates state machine configuration object c, sets
    // to default configurations. I believe this function is auto-generated
    // and gets a name of <program name>_program_get_default_config
    // Yes, page 40 of SDK guide
    pio_sm_config c = vsync_program_get_default_config(offset);

    // Map the state machine's SET pin group to one pin, namely the `pin`
    // parameter to this function.
    sm_config_set_set_pins(&c, pin, 1);
    sm_config_set_sideset_pins(&c, pin);

    // Set clock division (div by 5 for 25 MHz state machine)
    sm_config_set_clkdiv(&c, 5) ;

    // Set this pin's GPIO function (connect PIO to the pad)
    pio_gpio_init(pio, pin);
    
    // Set the pin direction to output at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
}
%}
